name: Host challenge for contributors

on:
  schedule:
    - cron: '0 */4 * * *'

jobs:
  host-challenge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: .github/workflows/challenge.yml

      - run: npm install firebase-admin

      - name: Check and add challenge to Firestore
        uses: actions/github-script@v6
        env:
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
          DB_NAME: ${{ secrets.DB_NAME }}
        with:
          script: |
            try {
              const admin = require('firebase-admin');
              admin.initializeApp({
                credential: admin.credential.cert(JSON.parse(process.env.SERVICE_ACCOUNT)),
                databaseURL: `https://${process.env.DB_NAME}.firebaseio.com`
              });

              const db = admin.firestore();
              const challengesCollection = db.collection('challenges');
              
              await db.runTransaction(async tsx => {
                // Get last challenge hosted on application
                const querySnapshot = await tsx.get(challengesCollection.orderBy('createdAt', 'desc').limit(1));
                
                // Figure out if challenge is still on going
                let isChallengeOnGoing = querySnapshot.size !== 0;
                if(querySnapshot.size > 0) {
                  const challengeData = querySnapshot.docs[0].data();
                  isChallengeOnGoing = !challengeData.winner;
                }

                if(!isChallengeOnGoing) {
                  const createdAt = admin.firestore.FieldValue.serverTimestamp();
                  const protectTask = Math.round(Math.random() * 10);
                  const robTask = Math.round(Math.random() * 15);
                  const scoreTask = Math.ceil(Math.random() * 10) * 10;

                  const worthScore = Math.ceil((protectTask + robTask + scoreTask) / 3) * 10;

                  const newChallengeRef = challengesCollection.doc();
                  tsx.set(newChallengeRef, {
                    createdAt,
                    tasks: {
                      PROTECT: protectTask,
                      ROB: robTask,
                      SCORE: scoreTask
                    },
                    winner: null,
                    worthScore,
                  });

                  console.log('New challenge added successfully');
                }
              });
              process.exit(0);
            } catch(error) {
              console.error(error);
              process.exit(1);
            }

          github-token: ${{ secrets.ACCESS_TOKEN }}
